// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'dart:io';

import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      // case TargetPlatform.android:
      //   return android;
      // case TargetPlatform.iOS:
      //   return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  // static FirebaseOptions get web {
  //   return FirebaseOptions(
  //     apiKey: Platform.environment['API_KEY']!,
  //     appId: Platform.environment['APP_ID']!,
  //     messagingSenderId: Platform.environment['MESSAGING_SENDER_ID']!,
  //     projectId: Platform.environment['PROJECT_ID']!,
  //     authDomain: Platform.environment['AUTH_DOMAIN']!,
  //     storageBucket: Platform.environment['STORAGE_BUCKET']!,
  //     measurementId: Platform.environment['MEASUREMENT_ID']!,
  //   );
  // }
  static FirebaseOptions get web {
    return FirebaseOptions(
      apiKey: dotenv.env['API_KEY']!,
      appId: dotenv.env['APP_ID']!,
      messagingSenderId: dotenv.env['MESSAGING_SENDER_ID']!,
      projectId: dotenv.env['PROJECT_ID']!,
      authDomain: dotenv.env['AUTH_DOMAIN']!,
      storageBucket: dotenv.env['STORAGE_BUCKET']!,
      measurementId: dotenv.env['MEASUREMENT_ID']!,
    );
  }
}